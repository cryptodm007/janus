# core/interfaces.py
from __future__ import annotations
from typing import Protocol, List, Optional
from core.schemas import CoreEvent, JobEnvelope

class JobQueueBackend(Protocol):
    def enqueue(self, env: JobEnvelope) -> None: ...
    def pop_due(self, now: float, limit: int) -> List[JobEnvelope]: ...
    def requeue(self, env: JobEnvelope) -> None: ...
    def ack(self, env: JobEnvelope) -> None: ...
    def dead_letter(self, env: JobEnvelope, reason: str) -> None: ...

class DistributedLock(Protocol):
    def acquire(self, timeout: float = 5.0) -> bool: ...
    def release(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc, tb): ...
